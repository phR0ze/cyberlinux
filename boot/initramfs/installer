#!/bin/bash
#MIT License
#Copyright (c) 2017 phR0ze
#
#Permission is hereby granted, free of charge, to any person obtaining a copy
#of this software and associated documentation files (the "Software"), to deal
#in the Software without restriction, including without limitation the rights
#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#copies of the Software, and to permit persons to whom the Software is
#furnished to do so, subject to the following conditions:
#
#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.
#
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#SOFTWARE.

# http://archlinux.me/brain0/2010/02/13/early-userspace-in-arch-linux/
# -----------------------------------------------------------------------------
# Booting Linux Systems:
# BIOS boots stage 1 bootloader (i.e. Master Boot Record) which then boots
# stage 2 bootloader (i.e. ISOLinux) which then extracts the Kernel which then
# boots the initramfs (i.e. early userspace) which then bootstraps the system
# to the point where it can access the real root filesystem and then early
# userspace turns control over to the init process (i.e. systemd) to complete
# the boot process.
# Thus booting into a live system means creating a unionfs mountpoint of the
# correct squashfs images in the appropriate squence as implicated by the
# kernel cmdline parameters and launching init from there.
# -----------------------------------------------------------------------------
none="\e[m"
red="\e[1;31m"
cyan="\e[0;36m"

fail_to_shell()
{
    echo -e "${red}failed!${none}"
    launch_interactive_shell
}

check_status()
{
    if [ $? -ne 0 ]; then
        fail_to_shell
    else
        [ "$1" != "nomsg" ] && echo -e "${cyan}success!${none}"
    fi
}

# Get a simple user input
getinput()
{
    local _result=$1                                # Return value container
    local input=$2                                  # User input value to prompt for
    local result=$3                                 # Default value to use if not set
    local silent=$4                                 # Don't echo when set

    echo -en "   Enter ${input} (default=${cyan}${result}${none}): "
    [ "x$vagrant" == "x1" ] && echo ''
    if [ "x$vagrant" != "x1" ]; then
        if [ $silent ]; then
            read -s value
            echo ''
        else
            read value
        fi
        [ "x$value" != "x" ] && local result=$value
    fi

    eval $_result=$result
}

getsel()
{
    local _result=$1                                # Return value container
    local options=$2                                # Space separate options

    local result=''
    local out_of_bounds=1
    for x in $options; do
        local out_of_bounds=$(($out_of_bounds+1))
    done
    while true; do
        echo -en "   Enter a number (default=${cyan}1${none}): "
        [ "x$vagrant" == "x1" ] && echo '' || read choice
        [ "x$choice" == "x" ] && choice=1
        if [ $choice -gt 0 ] && [ $choice -le $out_of_bounds ]; then
            local result=$(echo $options | awk "{print \$$choice}")
            break
        else
            echo -e "   ${red}Invalid selection, please try again${none}"
       fi
    done

    eval $_result=$result
}

mount_layers()
{
    local images_path=$1                            # e.g. ${isomnt}/cyberlinux
    local layered_mnt=$2                            # e.g. ${writemnt}/root
    local layered_tmp=$3                            # e.g. ${writemnt}/temp

    # Mount all implicated sqfs images
    local layer_dirs=""
    echo -e ":: Mounting implicated layers for install"
    for x in ${layers//,/ }; do
        local img_mnt="${readmnt}/${x}"             # i.e. ${readmnt}/{base,devel,lite, etc...}
        local img_path="${images_path}/${x}.sqfs"   # e.g. ${isomnt}/cyberlinux/base.sqfs
        layer_dirs="${layer_dirs}${img_mnt}:"

        echo -en ":: Mounting ${img_path} at ${img_mnt}..."
        mkdir -p "${img_mnt}"
        mount -r -t squashfs ${img_path} ${img_mnt} &> /dev/null
        check_status
        mounts="${mounts}${img_mnt} "
    done
    layer_dirs=${layer_dirs%?}

    # Layer squashfs images as implicated by $(layers)
    # e.g. new writable root = (live,heavy,lite,devel,base)
    echo -en ":: Overlay squashfs layers ${layer_dirs}..."
    mkdir -p ${layered_mnt}
    mkdir -p ${layered_tmp}
    mount -t overlay -o lowerdir=${layer_dirs},upperdir=${layered_mnt},workdir=${layered_tmp} none ${layered_mnt}
    check_status
    mounts="${mounts}${layered_mnt} "
}

# Wait for install device to register with system then mount it.
# Use kernel cmdline disk label to detect its existance
mount_iso()
{
    echo -en ":: Locating install device labeled ${label}..."

    local i=0
    local success=0
    while [ $success -eq 0 ]; do
        sleep 0.25 # Sleep for a bit

        # Mount iso by label from kernel cmdline
        isodev=$(blkid -L ${label}) &> /dev/null
        if [ "x${isodev}" != "x" ]; then
            check_status
            local fstype=$(blkid -s TYPE -o value ${isodev}) &> /dev/null
            local install_type=$(lsblk -nl -o TYPE ${isodev}) &> /dev/null
            echo -en "   Mounting ${cyan}${install_type}${none} device ${cyan}${isodev}${none} to ${isomnt}..."
            mount -r -t ${fstype} -o noatime ${isodev} ${isomnt} &> /dev/null
            check_status && success=1
        fi

        # Timeout if takes more than 10 seconds
        let "i+1"
        [ $i -eq 40 ] && fail_to_shell
    done
}

# Partition disk and mount for install at ${rootmnt}
partition_and_mount_disk()
{
    # Wipe, partition and format disk
    #---------------------------------------------------------------------------
    echo -en ":: Disk ${cyan}${install_dev}${none} identified as install disk..."
    [ "x${install_dev}" != "x" ]
    check_status

    echo -en ":: Destroy any magic strings and/or signatures on ${install_dev}..."
    wipefs --all --force ${install_dev} &> /dev/null
    check_status

    echo -en ":: Wiping partition table on ${install_dev}..."
    sgdisk --zap ${install_dev} &> /dev/null
    check_status

    # Create a GPT boot disk
    if [ "x${install_boot_type}" == "xgpt" ]; then
        echo -en ":: Creating ${install_dev}1 as BIOS boot partition..."
        sgdisk -n 0:0:+2M -t 0:ef02 -c 0:"BIOS boot" ${install_dev} &> /dev/null
        check_status

        echo -en ":: Creating ${install_dev}2 as Linux swap partition..."
        sgdisk -n 0:0:+4G -t 0:8200 -c 0:"Linux swap" ${install_dev} &> /dev/null
        check_status

        echo -en ":: Creating ${install_dev}3 as Linux filesystem partition..."
        sgdisk -n 0:0:0 -t 0:8300 -c 0:"Linux filesystem" ${install_dev} &> /dev/null
        check_status

        echo -en ":: Setting boot flag on ${install_dev}3..."
        sgdisk ${install_dev} --attributes=3:set:2 &> /dev/null
        check_status

    # Create a MBR boot disk
    else
        echo -en ":: Partitioning ${install_dev} with MBR..."
        echo ',2M,0' > layout
        echo ',4G,82' >> layout
        echo ',+,83,*' >> layout
        cat layout | sfdisk ${install_dev} &> /dev/null
        check_status
        rm -f layout
    fi

    echo -en ":: Formating ${install_dev}2 as (swap)..."
    mkswap ${install_dev}2 &> /dev/null
    check_status

    echo -en ":: Starting swap on ${install_dev}2..."
    swapon ${install_dev}2 &> /dev/null
    check_status

    echo -en ":: Formating ${install_dev}3 as (ext4)..."
    # -O ^64bit     makes compatible with syslinux
    # -F            force creation even if some params don't make sense
    # -L            set volume name used for /boot/syslinux/syslinux.cfg
    # -m 0          don't reserve blocks for super user daemons
    # -q            run in quiet mode for scripts
    mkfs.ext4 -O ^64bit -F -m 0 -q -L root ${install_dev}3 &> /dev/null
    check_status

    echo -en ":: Mounting ${install_dev}3 as ${rootmnt}..."
    # Disable access time writes (speeds things up)
    mount -o noatime ${install_dev}3 ${rootmnt} &> /dev/null
    check_status
}

mount_chroot_dirs()
{
    # Ensure mount point directories exist
    for x in "sys proc dev dev/pts"; do
        mkdir -p ${rootmnt}/${x} &> /dev/null
    done

    # Mount current system in newchroot
    mount -t sysfs sysfs ${rootmnt}/sys &> /dev/null
    mount -t proc /proc ${rootmnt}/proc &> /dev/null
    mount -o bind /dev ${rootmnt}/dev &> /dev/null
    mount -t devpts /dev/pts ${rootmnt}/dev/pts &> /dev/null
}

umount_chroot_dirs()
{
    for x in "sys proc dev/pts dev"; do
        umount -f ${rootmnt}/${x} &> /dev/null
    done
}

umount_all()
{
    mounts="${mounts}${isomnt}"
    for x in ${mounts}; do
        echo -en ":: Unmounting ${x}..."
        umount -f ${x} &> /dev/null
        check_status
    done
}

config_system()
{
    echo -en ":: Set root user password..."
    chroot ${rootmnt} usermod -p ${pass} root
    check_status

    # Filter groups down to just those that exist
    local groups=""
    for x in ${all_groups//,/ }; do
        if [ $(grep -E "^$x:" ${rootmnt}/etc/group) ]; then
            [ $groups ] && groups="${groups},${x}" || groups="${x}"
        fi
    done

    echo -en ":: Create user group '${user}'..."
    chroot ${rootmnt} groupadd ${user}
    check_status

    echo -en ":: Create user '${user}' with groups '${groups}'..."
    chroot ${rootmnt} useradd -m -g ${user} -G ${groups} -s /bin/bash ${user}
    check_status

    echo -en ":: Set user password..."
    chroot ${rootmnt} usermod -p ${pass} ${user}
    check_status

    echo -en ":: Add new user to sudoers list..."
    chroot ${rootmnt} /bin/bash -c "echo '${user} ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers"
    check_status

    # Set hostname to chosen layer
    echo -en ":: Set hostname to ${hostname}..."
    echo $hostname > "${rootmnt}/etc/hostname"
    check_status

    # Configure timezone
    echo -en ":: Set timezone to ${timezone}..."
    chroot ${rootmnt} ln -sf /usr/share/zoneinfo/$timezone /etc/localtime &> /dev/null
    check_status

    # Configure networking
    netmatch='en* eth*'
    if [ "x${netip}" != "xDHCP" ]; then
        local conf="${rootmnt}/etc/systemd/network/10-static.network"
        echo -en ":: Configuring static networking..."
        echo -e "[Match]\nName=${netmatch}\n" > $conf
        echo -e "[Network]\nAddress=${netip}\nIPForward=kernel\n" >> $conf
        check_status
    else
        local conf="${rootmnt}/etc/systemd/network/20-dhcp.network"
        echo -en ":: Configuring dhcp networking..."
        echo -e "[Match]\nName=${netmatch}\n" > $conf
        echo -e "[Network]\nDHCP=ipv4\nIPForward=kernel\n" >> $conf
        echo -e "[DHCP]\nUseDomains=true\n" >> $conf
        check_status
    fi
    if [ $proxy ] && [ "x$proxy" != "xNone" ]; then
        echo -en ":: Set proxy to ${proxy}..."
        proxy_port=${proxy//*:/}
        proxy_host=$(echo ${proxy//:/ } | awk '{print $1":"$2}')
        sed -i -e "s|^\(proxy\)=.*|\1=${proxy}|" "${rootmnt}/usr/bin/setproxy"
        sed -i -e "s|^\(proxy_host\)=.*|\1=${proxy_host}|" "${rootmnt}/usr/bin/setproxy"
        sed -i -e "s|^\(proxy_port\)=.*|\1=${proxy_port}|" "${rootmnt}/usr/bin/setproxy"
        check_status
        if [ $no_proxy ] && [ "x$no_proxy" != "xNone" ]; then
            echo -en ":: Set no_proxy to ${no_proxy}..."
            no_proxy_array="["
            ifs=$IFS; IFS=$','
            for x in $no_proxy; do no_proxy_array="${no_proxy_array}'${x}', "; done
            IFS=$ifs
            no_proxy_array="${no_proxy_array%??}]"
            sed -i -e "s|^\(no_proxy\)=.*|\1=${no_proxy}|" "${rootmnt}/usr/bin/setproxy"
            sed -i -e "s|^\(no_proxy_array\)=.*|\1=\"${no_proxy_array}\"|" "${rootmnt}/usr/bin/setproxy"
            check_status
        fi
        chroot ${rootmnt} /usr/bin/setproxy 1 &> /dev/null
    fi

    # Autologin if lxdm exists and parameter is set
    if [ -e "${rootmnt}/etc/lxdm/lxdm.conf" ]; then
        if [ "$autologin" == "1" ]; then
            echo -en ":: Enable autologin for LXDM..."
            sed -i -e "s/^#\s*\(autologin\)=.*/\1=${user}/" "${rootmnt}/etc/lxdm/lxdm.conf"
            check_status
        fi
    fi
}

# Create a new system mount then overlay layers as specified
# called by initcpio system with /new_root as param
installer()
{
    # Welcome message, centered
    #---------------------------------------------------------------------------
    local msg="--===<<<[[ ${label} ]]>>>===--"
    local len=$((75 - ${#msg}))
    local padleft=$(bash -c "printf '%0.1s' ' '{1..$((len/2))} $pad")
    local padright=$(bash -c "printf '%0.1s' ' '{1..$((len/2))} $pad")
    [ $((len%2)) == 1 ] && local padright="$padright "
    echo -e "${cyan}:: $(bash -c "printf '%0.1s' '*'{1..77}")${none}"
    echo -e "${cyan}:: *${padleft}${msg}${padright}*${none}"
    echo -e "${cyan}:: $(bash -c "printf '%0.1s' '*'{1..77}")${none}"
    echo -e "   ${params}"

    # Mount install source device
    #---------------------------------------------------------------------------
    mount_iso

    # Collect install destination device
    #---------------------------------------------------------------------------
    ifs=$IFS
    IFS=$'\n'
    local i=0
    echo -e "\n${cyan}:: Select a disk as your install destination:${none}"
    local disks=''
    local alldisks=$(lsblk -dn -o NAME,SIZE,VENDOR,MODEL,TYPE -x NAME | grep disk)
    for x in $alldisks; do
        local disk=$(echo $x | awk '{print $1}')
        local size=$(echo $x | awk '{print $2}')
        local vendor=$(echo $x | awk '{print $3}')
        local model=$(echo $x | awk '{print $4}')

        # Limit to just disks begining with "sd"
        if [ "${disk#*sd}" != "${disk}" ]; then

            # Limit to non iso device
            local dev=/dev/${disk}
            if [ "${isodev#*$dev}" == "${isodev}" ]; then
                local i=$((i+1))
                local disks="${disks} /dev/${disk}"
                echo -e "   ${i}) [${cyan}/dev/${disk}${none}] - ${size} ${vendor} ${model}"
            fi
        fi
    done
    IFS=$ifs
    getsel install_dev $disks
    getinput install_boot_type 'boot type, gpt|mbr' 'gpt'

    # Configure networking
    #---------------------------------------------------------------------------
    echo -e "\n${cyan}:: Configure networking:${none}"
    getinput hostname 'hostname' "${images_path}-${target_layer}"
    getinput netip 'static IP' 'DHCP'
    getinput proxy 'proxy, url:port format' 'None'
    [ "x${proxy}" != "xNone" ] && getinput no_proxy 'no_proxy, comma delimited' 'None'

    # Configure timezone
    #---------------------------------------------------------------------------
    echo -e "\n${cyan}:: Configure timezone:${none}"
    getinput timezone 'timezone' $timezone

    # Create new user account
    #---------------------------------------------------------------------------
    echo -e "\n${cyan}:: Create new user account:${none}"
    getinput user 'new username' 'vagrant'
    while true; do
        getinput pass 'new password' 'vagrant' 1
        getinput pass2 'password again' 'vagrant' 1
        if [ "x$pass" != "x$pass2" ]; then
            echo -e "   ${red}Passwords don't match, please try again${none}"
        else
            break
       fi
    done
    pass=$(mkpasswd -m sha $pass)

    # Mount live system or Install to local disk
    #---------------------------------------------------------------------------
    rootmnt="${1}"                          # /new_root passed in as 1st param
    local rw_ram_size="75%"
    local mode=$([ "$target_layer" == 'live' ] && echo 'Starting' || echo 'Installing')
    echo -e "\n${cyan}:: ${mode} '${target_layer}' system with layers '${layers}'${none}"
    echo -e "${cyan}:: --------------------------------------------------------------------${none}"
    echo -e ":: New Root path '${rootmnt}'"
    if [ $target_layer == "live" ]; then
        echo -en ":: Creating live tmpfs filesystem for writes, size=${rw_ram_size}..."
        mount -t tmpfs -o "size=${rw_ram_size}",mode=0755 none ${writemnt} &> /dev/null
        check_status
        mount_layers "${isomnt}/${images_path}" ${writemnt}/root ${writemnt}/temp

        echo -en ":: Re-bind ${writemnt}/root to new root location ${rootmnt}..."
        mount -o bind ${writemnt}/root ${rootmnt} &> /dev/null
        check_status
    else
        mount_layers "${isomnt}/${images_path}" ${readmnt}/root ${readmnt}/temp
        partition_and_mount_disk
        echo -e ":: Copying ${readmnt}/root to ${rootmnt}"
        rsync -ah --info=progress2 ${readmnt}/root/* ${rootmnt}
    fi

    # Configure system
    #---------------------------------------------------------------------------
    mount_chroot_dirs
    config_system
    echo -en ":: Set unique machine-id..."
    chroot ${rootmnt} dbus-uuidgen --ensure=/etc/machine-id &> /dev/null
    chroot ${rootmnt} ln -sf /etc/machine-id /var/lib/dbus/machine-id &> /dev/null
    check_status

    # Install bootloader
    #---------------------------------------------------------------------------
    if [ $target_layer != "live" ]; then
        echo -en ":: Install syslinux bootloader on ${install_dev}..."
        chroot ${rootmnt} syslinux-install_update -i -a -m &> /dev/null
        check_status

        echo -en ":: Generate new initramfs..."
        chroot ${rootmnt} mkinitcpio -p linux &> /dev/null
        check_status
    fi
    umount_chroot_dirs

    # Unmount everything after install
    [ $target_layer != "live" ] && umount_all
}

#----------------------------------------------------------------------------------------
# Early user space hook
#----------------------------------------------------------------------------------------
run_hook()
{
    # Set cmdline params as variables to use during install
    params=$(cat /proc/cmdline)
    for x in ${params}; do
        case "${x}" in
            'layers'=*) layers=${x//layers=} ;;
            'vagrant'=*) vagrant=${x//vagrant=} ;;
            'autologin'=*) autologin=${x//autologin=} ;;
            *) continue ;;
        esac
    done

    # Set additional variables
    mounts=""
    isomnt=/mnt/iso
    readmnt=/mnt/read
    writemnt=/mnt/write

    # Resolve template variables
    label="<%= label %>"
    timezone="<%= timezone %>"
    all_groups="<%= groups %>"
    images_path="<%= distro %>"

    target_layer=$(echo $layers | awk -F, '{print $1}')
    [ "x$vagrant" == "x1" ] && autologin=1
    [ "$target_layer" == "live" ] && autologin=1

    # Custom handler defined above.
    mount_handler="installer"
}
