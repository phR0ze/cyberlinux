#MIT License
#Copyright (c) 2017 phR0ze
#
#Permission is hereby granted, free of charge, to any person obtaining a copy
#of this software and associated documentation files (the "Software"), to deal
#in the Software without restriction, including without limitation the rights
#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#copies of the Software, and to permit persons to whom the Software is
#furnished to do so, subject to the following conditions:
#
#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.
#
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#SOFTWARE.

# Maintainer: phR0ze
#-------------------------------------------------------------------------------
# Inspiration and patches from the great work called out below:
# https://github.com/gcarq/inox-patchset
# https://github.com/Eloston/ungoogled-chromium
# https://git.iridiumbrowser.de/cgit.cgi/iridium-browser/
# https://anonscm.debian.org/cgit/pkg-chromium/pkg-chromium.git/tree/debian
# https://git.archlinux.org/svntogit/packages.git/tree/repos/extra-x86_64?h=packages/chromium
#-------------------------------------------------------------------------------
pkgname=chromium
pkgver=62.0.3202.94
pkgrel=2
_launcher_ver=0.0.6
pkgdesc="Chromium without Google big brother monitoring plus a few settings/UI tweaks to enhance privacy"
arch=('x86_64')
url="https://www.chromium.org/Home"
license=('BSD')
depends=('gtk3' 'nss' 'alsa-lib' 'xdg-utils' 'libxss' 'libcups' 'libgcrypt'
         'ttf-font' 'systemd' 'dbus' 'libpulse' 'pciutils' 'json-glib'
         'desktop-file-utils' 'hicolor-icon-theme')
makedepends=('python2' 'gperf' 'yasm' 'mesa' 'ninja' 'nodejs' 'git' 'libva' 'clang' 'lld' 'llvm')
optdepends=('pepper-flash: support for Flash content'
            'libva-intel-driver: for hardware video acceleration with Intel GPUs'
            'libva-mesa-driver: for hardware video acceleration with AMD/ATI GPUs'
            'libva-vdpau-driver: for hardware video acceleration with NVIDIA GPUs')
install=chromium.install
source=(https://commondatastorage.googleapis.com/chromium-browser-official/$pkgname-$pkgver.tar.xz
        chromium-launcher-$_launcher_ver.tar.gz::https://github.com/phR0ze/chromium-launcher/archive/$_launcher_ver.tar.gz
        chromium.desktop)
sha256sums=('cabc4d267bf08aabe11c5739048c43dde18c61acf595223a1c3aa1d3499558d4'
            '0575020841f8246f020179e854a074ba0944bfc24197b84feaaf5c0f13e5fb06'
            '028a748a5c275de9b8f776f97909f999a8583a4b77fd1cd600b4fc5c0c3e91e9')

# Possible replacements are listed in build/linux/unbundle/replace_gn_files.py
# Keys are the names in the above script; values are the dependencies in Arch
declare -rgA _system_libs=(
  #[ffmpeg]=ffmpeg           # https://crbug.com/731766
  [flac]=flac
  #[freetype]=freetype2      # https://crbug.com/pdfium/733
  [harfbuzz-ng]=harfbuzz-icu
  #[icu]=icu                 # https://crbug.com/772655
  [libdrm]=
  [libjpeg]=libjpeg
  #[libpng]=libpng           # https://crbug.com/752403#c10
  #[libvpx]=libvpx           # https://bugs.gentoo.org/611394
  [libwebp]=libwebp
  [libxml]=libxml2
  [libxslt]=libxslt
  [opus]=opus
  [re2]=re2
  [snappy]=snappy
  [yasm]=
  [zlib]=minizip
)
depends+=(${_system_libs[@]})

prepare() {
  cd $srcdir/$pkgname-$pkgver

  # Fix incorrect inclusion of <string_view> in modes other than >= C++17
  msg "Applying oneoff patches..."
  msg2 "Applying patch ../../patches/arch/one-off/crc32c-string-view-check.patch"
  patch -Np1 -d third_party/crc32c/src <../../patches/arch/one-off/crc32c-string-view-check.patch

  # Apply patches from various distributions
  for patchset in arch debian cyber inox; do
    msg "Applying $patchset patches..."
    for patch in ../../patches/$patchset/*.patch; do
      msg2 "Applying patch $patch"
      patch -Np1 -i $patch
    done
  done

  # Use Python 2
  find . -name '*.py' -exec sed -i -r 's|/usr/bin/python$|&2|g' {} +

  # There are still a lot of relative calls which need a workaround
  mkdir "$srcdir/python2-path"
  ln -s /usr/bin/python2 "$srcdir/python2-path/python"

  # Setup nodejs dependency
  mkdir -p third_party/node/linux/node-linux-x64/bin
  ln -s /usr/bin/node third_party/node/linux/node-linux-x64/bin/

  # Remove bundled libraries for which we will use the system copies; this
  # *should* do what the remove_bundled_libraries.py script does, with the
  # added benefit of not having to list all the remaining libraries
  local _lib
  for _lib in ${!_system_libs[@]} ${_system_libs[libjpeg]+libjpeg_turbo}; do
    find -type f -path "*third_party/$_lib/*" \
      \! -path "*third_party/$_lib/chromium/*" \
      \! -path "*third_party/$_lib/google/*" \
      \! -path "*base/third_party/icu/*" \
      \! -regex '.*\.\(gn\|gni\|isolate\|py\)' \
      -delete
  done

  python2 build/linux/unbundle/replace_gn_files.py \
    --system-libraries "${!_system_libs[@]}"
}

build() {
  make -C chromium-launcher-$_launcher_ver

  cd "$srcdir/$pkgname-$pkgver"

  export PATH="$srcdir/python2-path:$PATH"
  export TMPDIR="$srcdir/temp"
  mkdir -p "$TMPDIR"

  # Configure clang
  export CC=clang
  export CXX=clang++
  export AR=llvm-ar
  export NM=llvm-nm

  # Remove '-fno-plt' as it isn't supported by the Arch system clang
  export CFLAGS="${CFLAGS//-fno-plt/} -Wno-unknown-warning-option"
  export CXXFLAGS="${CXXFLAGS//-fno-plt/} -Wno-unknown-warning-option"

  local _flags=(
    'custom_toolchain="//build/toolchain/linux/unbundle:default"'
    'host_toolchain="//build/toolchain/linux/unbundle:default"'
    'clang_use_chrome_plugins=false'                # Don't use chrome clang plugins
    'is_clang=true'                                 # Use the clang compiler, produces better code
    'use_lld=true'                                  # Use LLVM's lld linker instead of Google's Clang plugins
    'symbol_level=0'                                # Will speed up build but make debugging impossible
    'is_debug=false'                                # Want a clean release version not debug
    'exclude_unwind_tables=true'                    # Exclude tables to save on disk space
    'fatal_linker_warnings=false'                   #
    'treat_warnings_as_errors=false'                #
    'fieldtrial_testing_like_official_build=true'   #
    'remove_webcore_debug_symbols=true'             # 
    'ffmpeg_branding="Chrome"'                      # 
    'proprietary_codecs=true'                       #
    'link_pulseaudio=true'                          # Use PulseAudio for sound
    'use_gtk3=true'                                 # Build with GTK3 rather than GTK2 support
    'use_gconf=false'                               # 
    'use_gnome_keyring=false'                       #
    'use_gold=false'                                #
    'use_sysroot=false'                             #
    'linux_use_bundled_binutils=false'              #
    'use_custom_libcxx=false'                       #
    'enable_hangout_services_extension=true'        # Enable Hangout service
    'enable_widevine=true'                          # Enable multi platform DRM support for media
    'enable_nacl=false'                             #
    'enable_swiftshader=false'                      #
    'enable_nacl_nonsfi=false'                      #
    'enable_remoting=false'                         # Disable Remoting
    'enable_google_now=false'                       # Disable google now
    'safe_browsing_mode=0'                          # Disable Safe browsing, requires patch to work
    'enable_hotwording=false'                       # Disable hotwording
  )

  msg2 'Building GN'
  python2 tools/gn/bootstrap/bootstrap.py --gn-gen-args "${_flags[*]}"

  msg2 'Configuring Chromium'
  out/Release/gn gen out/Release --args="${_flags[*]}" \
    --script-executable=/usr/bin/python2

  msg2 'Building Chromium'
  ninja -C out/Release chrome chrome_sandbox chromedriver widevinecdmadapter
}

package() {
  msg 'Build/Package launcher'
  cd chromium-launcher-$_launcher_ver
  make PREFIX=/usr DESTDIR="$pkgdir" install
  install -Dm644 LICENSE "$pkgdir/usr/share/licenses/chromium/LICENSE.launcher"

  msg 'Package chromium'
  cd "$srcdir/$pkgname-$pkgver"

  install -D out/Release/chrome "$pkgdir/usr/lib/chromium/chromium"
  install -Dm644 out/Release/chrome.1 "$pkgdir/usr/share/man/man1/chromium.1"
  install -Dm644 "$srcdir/chromium.desktop" \
    "$pkgdir/usr/share/applications/chromium.desktop"

  install -Dm4755 out/Release/chrome_sandbox \
    "$pkgdir/usr/lib/chromium/chrome-sandbox"

  cp -a \
    out/Release/{chrome_{100,200}_percent,resources}.pak \
    out/Release/{*.bin,chromedriver,libwidevinecdmadapter.so} \
    out/Release/locales \
    "$pkgdir/usr/lib/chromium/"

  if [[ -z ${_system_libs[icu]+set} ]]; then
    cp out/Release/icudtl.dat "$pkgdir/usr/lib/chromium/"
  fi

  ln -s /usr/lib/chromium/chromedriver "$pkgdir/usr/bin/chromedriver"

  for size in 22 24 48 64 128 256; do
    install -Dm644 "chrome/app/theme/chromium/product_logo_$size.png" \
      "$pkgdir/usr/share/icons/hicolor/${size}x${size}/apps/chromium.png"
  done

  for size in 16 32; do
    install -Dm644 "chrome/app/theme/default_100_percent/chromium/product_logo_$size.png" \
      "$pkgdir/usr/share/icons/hicolor/${size}x${size}/apps/chromium.png"
  done

  install -Dm644 LICENSE "$pkgdir/usr/share/licenses/chromium/LICENSE"

  # Install Chromium Extensions
  #-----------------------------------------------------------------------------
  extensions=(
    'https-everywhere'            # Automatically use HTTPS security where possible
    'smartup-gestures'            # Better mouse gestures for Chromium
    'tampermonkey'                # World's most popular userscript manager
    'ublock-origin'               # An efficient ad-blocker for Chromium
    'ublock-origin-extra'         # Foil early hostile anti-user mechanisms
    'videodownload-helper'        # Video download helper for Chromium
  )

#  # Download extensions
#  ifs=$IFS
#  cd $srcdir/..
#  exts=$(IFS=,; echo "${extensions[*]}")
#  ruby chroma.rb download --extensions=$exts --chromium=$pkgver --outdir=$srcdir/extensions
#  IFS=$ifs
#
#  # Install extensions
#  cd $srcdir/extensions
#  find . -type f -exec install -Dm644 "{}" "${pkgdir}/usr/share/chromium/extensions/{}" \;

  # Install Custom configuration 
  # - chromium.conf: list of command line options to give to chromium when starting
  #   https://peter.sh/experiments/chromium-command-line-switches/
  # - master_preferences: acts as a template for the first run then user can edit them
  #   http://www.chromium.org/administrators/configuring-other-preferences
  #-----------------------------------------------------------------------------
  install -Dm644 $srcdir/../config/chromium.conf -t $pkgdir/etc/chromium
  install -Dm644 $srcdir/../config/master_preferences -t $pkgdir/etc/chromium
}

# vim: ts=2:sw=2:sts=2
